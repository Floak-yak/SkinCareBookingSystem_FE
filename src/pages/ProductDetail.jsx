import React, { useContext, useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button, Card, Rate, Tabs, message } from "antd";
import CartContext from "../context/CartContext";
import productApi from "../api/productApi";
import "../styles/productDetail.css";

const { TabPane } = Tabs;

const ProductDetail = () => {
  const [product, setProduct] = useState(null);
  const [related, setRelated] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Gi·∫£ l·∫≠p rating & review
  const [rating] = useState(4.5);
  const [numReviews] = useState(120);

  // Gi·∫£ ƒë·ªãnh route l√† /products/:id/:name
  // Ho·∫∑c n·∫øu ch·ªâ d√πng /products/:id th√¨ b·ªè bi·∫øn name
  const { id, name } = useParams();
  const navigate = useNavigate();
  const { dispatch } = useContext(CartContext);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // üü¢ G·ªçi API getById thay v√¨ searchByName
        const productRes = await productApi.getById(id);
        const currentProduct = productRes.data;

        if (!currentProduct) {
          setError("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
          return;
        }

        setProduct(currentProduct);

        // L·∫•y danh s√°ch s·∫£n ph·∫©m li√™n quan c√πng category
        if (currentProduct?.categoryId) {
          const relatedRes = await productApi.searchByCategory(
            currentProduct.categoryId
          );
          let relatedList = relatedRes.data || [];
          // Lo·∫°i b·ªè s·∫£n ph·∫©m hi·ªán t·∫°i kh·ªèi danh s√°ch li√™n quan
          relatedList = relatedList.filter((p) => String(p.id) !== id);
          setRelated(relatedList);
        }
      } catch (err) {
        console.error("L·ªói khi t·∫£i chi ti·∫øt s·∫£n ph·∫©m:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  // X·ª≠ l√Ω c√°c tr·∫°ng th√°i loading / error / kh√¥ng c√≥ s·∫£n ph·∫©m
  if (loading) return <p>ƒêang t·∫£i s·∫£n ph·∫©m...</p>;
  if (error) return <p>{error}</p>;
  if (!product) return <p>S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.</p>;

  // Th√™m v√†o gi·ªè h√†ng
  const handleAddToCart = () => {
    dispatch({ type: "ADD_ITEM", payload: product });
    message.success(`ƒê√£ th√™m "${product.productName}" v√†o gi·ªè h√†ng!`);
  };

  // Khi click s·∫£n ph·∫©m li√™n quan
  const handleRelatedClick = (rid, rname) => {
    navigate(`/products/${rid}/${encodeURIComponent(rname)}`);
  };

  return (
    <div className="product-detail-page">
      <div className="product-detail-main">
        {/* ·∫¢nh s·∫£n ph·∫©m */}
        <div className="product-detail-image">
          <img
            src={
              product?.image?.bytes
                ? `data:image/${(product.image.fileExtension || ".png").replace(
                    ".",
                    ""
                  )};base64,${product.image.bytes}`
                : "/images/default-placeholder.png"
            }
            alt={product?.productName || "No name"}
          />
        </div>

        {/* Th√¥ng tin s·∫£n ph·∫©m */}
        <div className="product-detail-info">
          <h1>{product.productName}</h1>
          <p className="product-price">{product.price?.toLocaleString()} VND</p>

          <div className="product-rating">
            <Rate disabled defaultValue={Math.round(rating)} />
            <span className="rating-text">
              {rating}/5 ({numReviews} ƒë√°nh gi√°)
            </span>
          </div>

          <Button
            type="primary"
            onClick={handleAddToCart}
            className="add-cart-btn"
          >
            Th√™m v√†o gi·ªè h√†ng
          </Button>

          {/* Tabs m√¥ t·∫£, ƒë√°nh gi√°, ch√≠nh s√°ch */}
          <Tabs defaultActiveKey="1" className="product-tabs">
            <TabPane tab="M√¥ t·∫£" key="1">
              <p className="product-description">
                {product.description || "Ch∆∞a c√≥ m√¥ t·∫£."}
              </p>
            </TabPane>
            <TabPane tab="ƒê√°nh gi√°" key="2">
              <p>Hi·ªÉn th·ªã c√°c ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng ·ªü ƒë√¢y.</p>
            </TabPane>
            <TabPane tab="Ch√≠nh s√°ch" key="3">
              <p>
                <strong>Giao h√†ng:</strong> Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n &gt;
                500k.
              </p>
              <p>
                <strong>ƒê·ªïi tr·∫£:</strong> Trong v√≤ng 7 ng√†y n·∫øu c√≥ l·ªói nh√† s·∫£n
                xu·∫•t.
              </p>
            </TabPane>
          </Tabs>
        </div>
      </div>

      {/* S·∫£n ph·∫©m li√™n quan */}
      <div className="related-products">
        <h2>S·∫£n ph·∫©m li√™n quan</h2>
        <div className="related-products-container">
          {related.map((rp) => (
            <div
              key={rp.id}
              className="related-product-card"
              onClick={() => handleRelatedClick(rp.id, rp.productName)}
            >
              <Card
                hoverable
                cover={
                  <img
                    alt={rp.productName}
                    src={
                      rp.image && rp.image.bytes
                        ? `data:image/${rp.image.fileExtension.replace(
                            ".",
                            ""
                          )};base64,${rp.image.bytes}`
                        : "/images/default-placeholder.png"
                    }
                    onError={(e) =>
                      (e.target.src = "/images/default-placeholder.png")
                    }
                    style={{ height: "200px", objectFit: "cover" }}
                  />
                }
              >
                <Card.Meta
                  title={rp.productName}
                  description={`${rp.price?.toLocaleString()} VND`}
                />
              </Card>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ProductDetail;
